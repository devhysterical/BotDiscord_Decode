require("dotenv").config();
const {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ActivityType,
} = require("discord.js");

// Kh·ªüi t·∫°o Discord client v·ªõi c√°c intent c·∫ßn thi·∫øt
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
  partials: [Partials.Channel, Partials.Message],
});

const PREFIX = process.env.PREFIX || "!";

// S·ª± ki·ªán khi bot ƒë√£ s·∫µn s√†ng
client.on("ready", () => {
  console.log(`Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√™n ${client.user.tag}`);
  client.user.setActivity("!decode help", { type: ActivityType.Playing });
});

// H√†m decode Base64
function decodeBase64(text) {
  try {
    return Buffer.from(text, "base64").toString("utf-8");
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode Base64: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m decode URL
function decodeURL(text) {
  try {
    return decodeURIComponent(text);
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode URL: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m decode Hex
function decodeHex(text) {
  try {
    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† ki·ªÉm tra xem c√≥ b·∫Øt ƒë·∫ßu b·∫±ng "0x" kh√¥ng
    text = text.replace(/\s+/g, "");
    if (text.startsWith("0x")) {
      text = text.substring(2);
    }

    // Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a c√°c k√Ω t·ª± hex h·ª£p l·ªá kh√¥ng
    if (!/^[0-9A-Fa-f]+$/.test(text)) {
      return "Chu·ªói Hex kh√¥ng h·ª£p l·ªá";
    }

    let result = "";
    for (let i = 0; i < text.length; i += 2) {
      if (i + 1 < text.length) {
        const charCode = parseInt(text.substring(i, i + 2), 16);
        result += String.fromCharCode(charCode);
      }
    }
    return result;
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode Hex: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m decode Binary
function decodeBinary(text) {
  try {
    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† ki·ªÉm tra xem c√≥ ch·ª©a ch·ªâ 0 v√† 1 kh√¥ng
    text = text.replace(/\s+/g, "");
    if (!/^[01]+$/.test(text)) {
      return "Chu·ªói nh·ªã ph√¢n kh√¥ng h·ª£p l·ªá";
    }

    let result = "";
    for (let i = 0; i < text.length; i += 8) {
      const byte = text.substring(i, i + 8);
      if (byte.length === 8) {
        const charCode = parseInt(byte, 2);
        result += String.fromCharCode(charCode);
      }
    }
    return result;
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode Binary: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m decode ASCII
function decodeASCII(text) {
  try {
    // Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a c√°c s·ªë ASCII h·ª£p l·ªá kh√¥ng
    const asciiCodes = text.split(/\s+/).map(Number);
    if (
      asciiCodes.some(isNaN) ||
      asciiCodes.some((code) => code < 0 || code > 127)
    ) {
      return "C√°c m√£ ASCII kh√¥ng h·ª£p l·ªá";
    }

    return asciiCodes.map((code) => String.fromCharCode(code)).join("");
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode ASCII: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m decode Morse
function decodeMorse(text) {
  const morseCodeMap = {
    ".-": "A",
    "-...": "B",
    "-.-.": "C",
    "-..": "D",
    ".": "E",
    "..-.": "F",
    "--.": "G",
    "....": "H",
    "..": "I",
    ".---": "J",
    "-.-": "K",
    ".-..": "L",
    "--": "M",
    "-.": "N",
    "---": "O",
    ".--.": "P",
    "--.-": "Q",
    ".-.": "R",
    "...": "S",
    "-": "T",
    "..-": "U",
    "...-": "V",
    ".--": "W",
    "-..-": "X",
    "-.--": "Y",
    "--..": "Z",
    ".----": "1",
    "..---": "2",
    "...--": "3",
    "....-": "4",
    ".....": "5",
    "-....": "6",
    "--...": "7",
    "---..": "8",
    "----.": "9",
    "-----": "0",
    "--..--": ",",
    ".-.-.-": ".",
    "..--..": "?",
    "-..-.": "/",
    "-.--.": "(",
    "-.--.-": ")",
    ".-...": "&",
    "---...": ":",
    "-.-.-.": ";",
    "-...-": "=",
    ".-.-.": "+",
    "-....-": "-",
    "..--.-": "_",
    ".-..-.": '"',
    "...-..-": "$",
    ".--.-.": "@",
    "...---...": "SOS",
  };

  try {
    // T√°ch c√°c t·ª´ v√† k√Ω t·ª± trong m√£ Morse
    const words = text.trim().split("   ");
    let result = "";

    for (const word of words) {
      const characters = word.split(" ");
      for (const char of characters) {
        if (char === "") continue;
        if (morseCodeMap[char]) {
          result += morseCodeMap[char];
        } else {
          result += "?"; // K√Ω t·ª± kh√¥ng x√°c ƒë·ªãnh
        }
      }
      result += " ";
    }

    return result.trim();
  } catch (error) {
    return "Kh√¥ng th·ªÉ decode Morse: ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá";
  }
}

// H√†m cung c·∫•p v√≠ d·ª• cho t·ª´ng lo·∫°i decode
function getExampleForType(type) {
  switch (type.toLowerCase()) {
    case "base64":
      return `\`${PREFIX}decode base64 SGVsbG8gV29ybGQ=\``;
    case "url":
      return `\`${PREFIX}decode url Hello%20World\``;
    case "hex":
      return `\`${PREFIX}decode hex 48656C6C6F20576F726C64\``;
    case "binary":
      return `\`${PREFIX}decode binary 01001000 01100101 01101100 01101100 01101111\``;
    case "ascii":
      return `\`${PREFIX}decode ascii 72 101 108 108 111\``;
    case "morse":
      return `\`${PREFIX}decode morse .... . .-.. .-.. ---\``;
    default:
      return `\`${PREFIX}decode help\` ƒë·ªÉ xem danh s√°ch l·ªánh h·ª£p l·ªá`;
  }
}

// H√†m hi·ªÉn th·ªã tr·ª£ gi√∫p
function showHelp(message) {
  const helpEmbed = new EmbedBuilder()
    .setColor("#0099ff")
    .setTitle("üîç Discord Decode Bot - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    .setDescription(
      "Bot c√≥ th·ªÉ gi·∫£i m√£ nhi·ªÅu lo·∫°i m√£ kh√°c nhau. S·ª≠ d·ª•ng c√°c l·ªánh sau:"
    )
    .addFields(
      {
        name: "üìã C√°c l·ªánh c√≥ s·∫µn:",
        value: `S·ª≠ d·ª•ng prefix \`${PREFIX}\` tr∆∞·ªõc m·ªói l·ªánh.`,
      },
      {
        name: `üîπ ${PREFIX}decode base64 <text>`,
        value:
          "Decode chu·ªói Base64\nV√≠ d·ª•: " +
          getExampleForType("base64").replace(/`/g, ""),
      },
      {
        name: `üîπ ${PREFIX}decode url <text>`,
        value:
          "Decode chu·ªói URL\nV√≠ d·ª•: " +
          getExampleForType("url").replace(/`/g, ""),
      },
      {
        name: `üîπ ${PREFIX}decode hex <text>`,
        value:
          "Decode chu·ªói Hex\nV√≠ d·ª•: " +
          getExampleForType("hex").replace(/`/g, ""),
      },
      {
        name: `üîπ ${PREFIX}decode binary <text>`,
        value:
          "Decode chu·ªói nh·ªã ph√¢n\nV√≠ d·ª•: " +
          getExampleForType("binary").replace(/`/g, ""),
      },
      {
        name: `üîπ ${PREFIX}decode ascii <text>`,
        value:
          "Decode chu·ªói m√£ ASCII\nV√≠ d·ª•: " +
          getExampleForType("ascii").replace(/`/g, ""),
      },
      {
        name: `üîπ ${PREFIX}decode morse <text>`,
        value:
          "Decode chu·ªói m√£ Morse\nV√≠ d·ª•: " +
          getExampleForType("morse").replace(/`/g, ""),
      }
    )
    .setFooter({
      text: "üí° G√µ !decode <lo·∫°i> ƒë·ªÉ xem c√∫ ph√°p c·ª• th·ªÉ cho t·ª´ng lo·∫°i decode",
    });

  message.channel.send({ embeds: [helpEmbed] });
}

// X·ª≠ l√Ω tin nh·∫Øn
client.on("messageCreate", async (message) => {
  // B·ªè qua tin nh·∫Øn t·ª´ bot v√† tin nh·∫Øn kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng prefix
  if (message.author.bot || !message.content.startsWith(PREFIX)) return;

  // Ph√¢n t√≠ch n·ªôi dung tin nh·∫Øn
  const args = message.content.slice(PREFIX.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  // X·ª≠ l√Ω l·ªánh decode
  if (command === "decode") {
    const type = args.shift()?.toLowerCase();
    const content = args.join(" ");

    // N·∫øu kh√¥ng c√≥ type ho·∫∑c type l√† "help", hi·ªÉn th·ªã tr·ª£ gi√∫p
    if (!type || type === "help") {
      return showHelp(message);
    }

    // N·∫øu c√≥ type nh∆∞ng kh√¥ng c√≥ content, hi·ªÉn th·ªã th√¥ng b√°o l·ªói v√† g·ª£i √Ω c√∫ ph√°p
    if (!content) {
      const typeHelpEmbed = new EmbedBuilder()
        .setColor("#ff0000")
        .setTitle("L·ªói: Thi·∫øu n·ªôi dung ƒë·ªÉ gi·∫£i m√£")
        .setDescription(
          `B·∫°n c·∫ßn cung c·∫•p n·ªôi dung ƒë·ªÉ gi·∫£i m√£ v·ªõi l·ªánh \`${PREFIX}decode ${type}\`.`
        )
        .addFields(
          {
            name: "C√∫ ph√°p ƒë√∫ng",
            value: `\`${PREFIX}decode ${type} <n·ªôi dung c·∫ßn gi·∫£i m√£>\``,
          },
          {
            name: "V√≠ d·ª•",
            value: getExampleForType(type),
          }
        )
        .setFooter({
          text: `S·ª≠ d·ª•ng ${PREFIX}decode help ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh`,
        });

      return message.channel.send({ embeds: [typeHelpEmbed] });
    }

    let result = "";
    let title = "";

    switch (type) {
      case "base64":
        result = decodeBase64(content);
        title = "Base64 Decode";
        break;
      case "url":
        result = decodeURL(content);
        title = "URL Decode";
        break;
      case "hex":
        result = decodeHex(content);
        title = "Hex Decode";
        break;
      case "binary":
        result = decodeBinary(content);
        title = "Binary Decode";
        break;
      case "ascii":
        result = decodeASCII(content);
        title = "ASCII Decode";
        break;
      case "morse":
        result = decodeMorse(content);
        title = "Morse Code Decode";
        break;
      default:
        result =
          "Lo·∫°i decode kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. S·ª≠ d·ª•ng `!decode help` ƒë·ªÉ xem danh s√°ch c√°c lo·∫°i ƒë∆∞·ª£c h·ªó tr·ª£.";
        title = "L·ªói";
        break;
    }

    const resultEmbed = new EmbedBuilder()
      .setColor("#0099ff")
      .setTitle(title)
      .addFields(
        { name: "ƒê·∫ßu v√†o", value: "```" + content + "```", inline: false },
        { name: "K·∫øt qu·∫£", value: "```" + result + "```", inline: false }
      )
      .setTimestamp();

    message.channel.send({ embeds: [resultEmbed] });
  }
});

// ƒêƒÉng nh·∫≠p Bot
client.login(process.env.TOKEN).catch((error) => {
  console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
});

// nothing special here
